---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Mission Life New User Email Invitation
Resources:

# SQS Resources 
  MissionLifeNewUsersDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 172800
      QueueName: MissionLifeNewUsersDeadLetter
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 300
  MissionLifeNewUsersQueue:
    DependsOn:
      - MissionLifeNewUsersDeadLetterQueue
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 172800
      QueueName: MissionLifeNewUsers
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MissionLifeNewUsersDeadLetterQueue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 300

# Lambda Resources
  MissionLifeNewUsersSchedulerLambda:
    DependsOn:
      - MissionLifeNewUsersSchedulerLambdaExecutionRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/mission-life-new-users-scheduler.zip
      FunctionName: missionLifeNewUsersScheduler
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt MissionLifeNewUsersSchedulerLambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          REACH_BASE_URL: {{{REACH_BASE_URL}}}
          REACH_AUTHORIZATION_TOKEN: {{{REACH_AUTHORIZATION_TOKEN}}}
          MISSION_LIFE_NEW_USERS_QUEUE_URL: {{{MISSION_LIFE_NEW_USERS_QUEUE_URL}}}

  MissionLifeNewUsersSchedulerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: sqs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:*
            Resource: 
              - !GetAtt MissionLifeNewUsersQueue.Arn
              - !GetAtt MissionLifeNewUsersDeadLetterQueue.Arn

  MissionLifeNewUsersSchedulerLambdaLogGroup:
    DependsOn: MissionLifeNewUsersSchedulerLambda
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Join
        - ''
        - - 'lambda/'
          - !Ref MissionLifeNewUsersSchedulerLambda

# - PolicyName: dynamodb
#   PolicyDocument:
#     Statement:
#     - Effect: Allow
#       Action:
#       - dynamodb:GetItem
#       - dynamodb:GetRecords
#       - dynamodb:BatchGetItem
#       - dynamodb:DescribeTable
#       - dynamodb:Query
#       - dynamodb:Scan
#       - dynamodb:PutItem
#       Resource:
#       - !GetAtt CoverageReportsTable.Arn
# New User Scheduler Dynamo Resources
# WebAppUsersTable:
#   Type: AWS::DynamoDB::Table
#   Properties:
#     TableName: "WEB_APP_USERS"
#     AttributeDefinitions:
#       -
#         AttributeName: "SEARCH_ID"
#         AttributeType: "S"
#       -
#         AttributeName: "END_DATE"
#         AttributeType: "S"
#     KeySchema:
#       -
#         AttributeName: "SEARCH_ID"
#         KeyType: "HASH"
#     GlobalSecondaryIndexes:
#       -
#         IndexName: "END_DATE_GSI"
#         KeySchema:
#           -
#           AttributeName: "END_DATE"
#           KeyType: "HASH"
#         Projection:
#           ProjectionType: "ALL"
#     BillingMode: "PAY_PER_REQUEST"
# New User Scheduler Cloudwatch & Alarm Resources	
# MissionLifeNewUsersSchedulerRule:
#   Type: AWS::Events::Rule
#   Properties:
#     ScheduleExpression: "cron(00 13 * * ? *)"
#     Targets:
#     - Id: MissionLifeNewUsersSchedulerRuleTarget
#     Arn: !GetAtt MissionLifeNewUsersSchedulerLambda.Arn
# MissionLifeNewUsersSchedulerInvokePermission:
#   Type: AWS::Lambda::Permission
#   Properties:
#     FunctionName: !GetAtt MissionLifeNewUsersSchedulerLambda.Arn
#     Action: "lambda:InvokeFunction"
#     Principal: "events.amazonaws.com"
#     SourceArn: !GetAtt MissionLifeNewUsersSchedulerRule.Arn